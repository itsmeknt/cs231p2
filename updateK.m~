function [k] = updateK(im_data_vectorized, alpha, alphaVal, bbox_vectorized, numK, pi, mu, sigma, init )
% disp('step 1: finding k');
if init
    k = initK(im_data_vectorized, alpha, alphaVal, bbox_vectorized);
else
    D = computeD(im_data_vectorized, numK, pi, mu, sigma);
    [~, kUpdated] = min(D);
    k = kUpdated;
end
% disp('step 1 done!');
end

function k = initK(im_data_vectorized, alpha, alphaVal, bbox_vectorized)       % D is [k x numpixels]
initGlobalVariables;
rng(RAND_SEED);
k = randi(K, [1 length(alpha)]);

%{
k = zeros(1, size(im_data_vectorized,2));

%if (allowCache)
%    try
%        load([kCacheFile]);
%        return
%    catch
%    end
%end

% disp('initializing k using kmeans');
[kFg, ~] = kMeans(im_data_vectorized(:,bbox_vectorized==1)', K);                                   % k is [1 x numpixel]
[kBg, ~] = kMeans(im_data_vectorized(:,bbox_vectorized==0)', K);                                   % k is [1 x numpixel]
k = zeros(1, length(alpha));
fgIdx = 1;
bgIdx = 1;
for i=1:length(alpha)
    if (alpha(i) == fg_val)
        k(i) = kFg(fgIdx);
        fgIdx = fgIdx+1;
    elseif (alpha(i) == bg_val)
        k(i) = kBg(bgIdx);
        bgIdx = bgIdx+1;
    end
end
% save(kCacheFile, 'k');
%}
end