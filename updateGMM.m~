function [pi mu sigma] = updateGMM(im_data_vectorized, alpha, alphaVal, k, numK, init)
% disp('step 2: finding theta');
initGlobalVariables;
pi = zeros(1, K);                              % pi is [1 x k]
mu = zeros(numColors, K);                   % mu is [3 x k]
sigma = zeros(numColors, numColors, K);     % sigma is [3 x 3 x k]
for i = 1:numK
    idx_k = k == i;
    idx_alpha = alpha==alphaVal;
    idx_alpha_k = idx_alpha & idx_k;
    
    numPixel_alpha_k = sum(idx_alpha_k);
    numPixel_alpha = sum(idx_alpha);
    pi(i) = numPixel_alpha_k/numPixel_alpha;
    
    % compute pi
    if (numPixel_alpha_k == 0 || numPixel_alpha == 0 || abs(pi(i)) < epsilon)
        pi(i) = epsilon;
    end
    
    % comptue mu
    im_data_alpha_k = im_data_vectorized(:, idx_alpha_k);
    if numPixel_alpha_k == 0
        mu(:, i) = zeros(numColors, 1);
    else
        mu(:, i) = mean(im_data_alpha_k,2);
    end
    
    % compute sigma
    if numPixel_alpha_k <= 1
        sigma(:, :, fg_idx, i) = eye(numColors)*delta;
    else
        temp_sigma_vector = bsxfun(@minus, im_data_alpha_k, mu(:, fg_idx, i));
        sigma(:, :, fg_idx, i) =  (temp_sigma_vector * temp_sigma_vector')/(numPixel_alpha_k-1) + eye(numColors)*epsilon;
    end
    
    if numPixel_alpha_i == 0
        mu(:, bg_idx, i) = zeros(numColors, 1, 1);
    else
        mu(:, bg_idx, i) = mean(im_data_bg_i,2);
    end
    if numPixel_alpha_i <= 1
        sigma(:, :, bg_idx, i) = eye(numColors)*epsilon;
    else
        temp_bg_sigma_vector = bsxfun(@minus, im_data_bg_i, mu(:, bg_idx, i));
        sigma(:, :, bg_idx, i) = (temp_bg_sigma_vector * temp_bg_sigma_vector')/(numPixel_alpha_i-1) + eye(numColors)*epsilon;
    end
end
% disp('step 2 done!');


end
